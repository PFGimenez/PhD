/*   (C) Copyright 2013, Schmidt Nicolas
 * 
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.math.*;

import java.lang.management.*;

import br4cp.*;

public class Main {



	
	public static void main(String[] args) {
		
		//ReecritureFichier r=new ReecritureFichier();
		//r.reecritureMonth(1,3,"smallHistory.xml","smallHistory1-3.xml");
		//r.reecritureALaLigne("MediumHist.xml", "MediumHist2.xml");
		//r.reecritureTxtSmall("test2.txt", "test3.txt");
		//r.reecritureTxtMedium("test2.txt", "test3.txt");
		//r.reecritureTxtBig("test2.txt", "bigTest.txt");	
		
		
		Ordonnancement ord;
		
		long start= System.currentTimeMillis();
		long end;
		
		ord = new Ordonnancement();
		
		LecteurXML xml=new LecteurXML(ord);
		xml.lecture("big_History.xml");
		//xml.lecture("MediumHist.xml");
		xml.month(0,0);
		ord.addVarialbes(xml.getVariables());
		ord.supprmonth();

		//xml.lectureSuite("smallPourHisto.xml");

				
		if(xml.getNbVariables()!=ord.size())
			System.out.println("bug nb variables");
			
		//ord.supprmonth();
		//reordonnancement
		ord.reordoner(xml.getInvolvedVariablesEntree(), 0, false);			//<---
//		ord.reordoner(xml.getScopeID(), 7);							//<---
		xml.actualiseVariables();
		//ord.afficherOrdre();
		//ord.getInfo(xml.getInvolvedVariablesEntree());
		//xml.compactConstraint();
		
		UniqueHashTable uht=new UniqueHashTable(ord.size());
		VDD x =new VDD(ord.getVariables(), uht, true);

		//x.addToSlddMult();
		//System.out.println("sldd" + x[bclD].uht.size());
			
		x.flagMult=(false);											//<---
		x.flagPlus=true;											//<---
		x.flagOperateurPrincipalMultiplication=(false);				//<---
		//contraintes[tuples][arity];	
		//poid[tuples]
			
//		x[bclD].toDot("xsldd", true);
	
		//contrainte de boucle
		float domain=xml.var.get(0).domain;

			
			
		int contraintes[][];
		String contraintesS[][];
		Structure Poids[];
		Structure defaultCost;
		boolean softConstraint;
	
		for(int i=0; i<xml.nbConstraints; i++){
		//for(int i=0; i<1; i++){
			contraintesS=xml.getConstraintS(i);
			contraintes=xml.getConstraint(i);
			if(contraintesS!=null){
				Poids=xml.getPoid(i);
				if(contraintesS.length!=0){
					defaultCost=xml.getDefaultCost(i);
					softConstraint=xml.getSoftConstraint(i);
				
			if(contraintesS.length>0)
				contraintes=new int[contraintesS.length][contraintesS[0].length];
			else
				contraintes=new int[0][0];
					
			//traduction en valeur de 0 a n (au lieu de strings)
			for(int j=0; j<contraintes.length; j++){
				for(int k=1; k<contraintes[j].length; k++){
					contraintes[j][k]=ord.getVariables().get(k-1).conv(contraintesS[j][k]);
				}
			}
			x.valeurChemin(contraintes, Poids, defaultCost, softConstraint);
			System.out.println("sldd"+(i+1)+"/"+xml.nbConstraints+"  nbneuds:" + x.uht.size() + " (" + x.uht.sizeArcs() + ")");
			//x.minMaxConsistance();
			System.out.println("counting"+x.countingpondere());

				}
			}
		}
		x.variance(0, "big");

		//if(!flag_beg)
		//	x.uht.rechercheNoeudInutile();


		System.out.println("--");
		end=System.currentTimeMillis();
		System.out.println("fin compilation :  " + (end-start)/1000+","+(end-start)%1000 + "s ("+(end-start)+")");
		System.out.println(x.uht.size() + " (" + x.uht.sizeArcs() + ")");
		x.minMaxConsistance();
		System.out.println(x.max.getvaldouble() +" "+x.min.getvaldouble());
		
		x.toDot("bigHistory", false);		
		
		System.out.println("----compilation contraintes----");
		CompilateurSLDD cs;
		cs=new CompilateurSLDD(Protocol.FCP);
		cs.readProblem("big");
		cs.initialize();
		
		LecteurCdXml lect=new LecteurCdXml();
		int m;
		int [] mconf=new int[12];
		int [] mechec=new int[12];
		for(int i=0; i<12; i++){
			mconf[i]=0; mechec[i]=0;
		}

		int totsuccess=0, totechec=0, toterror=0;

		//for(int it=0; it<15972; it++){		//small
		//for(int it=0; it<9151; it++){			//medium
		//for(int it=0; it<8528; it++){			//big

		for(int it=0; it<8528; it++){
		
		ArrayList<String> memory=new ArrayList<String>();
		//for(int i=0; i<x.variables.size(); i++){
//	System.out.println("avant choix : "+x.countingpondere());

		ArrayList<String> choix1=new ArrayList<String>();
		ArrayList<String> choix2=new ArrayList<String>();
		
		//smalll 46
		//small 48
		//big 87
		//med 44
		m=lect.lectureTxt("bigTest", it, 87);
			
			for(int i=0; i<87; i++){
				choix1.add(lect.var[i]);
				choix2.add(lect.dom[i]);
			}
			
			double nb;
			int i;
			int success=0, echec=0, error=0;
			Map<String, Double> recomandations;
			Set<String> possibles;
			String best;
			double bestproba;
			
			while(choix1.size()>0){
				i=(int)Math.floor(choix1.size()*Math.random());
				i=0;
//				System.out.println("random="+choix1.get(i)+"("+i+") (size="+choix1.size()+")" + "    "+choix1.get(i)+"="+choix2.get(i));
//				System.out.println(cs.getCurrentDomainOf(choix1.get(i)));
				
				
				possibles=cs.getCurrentDomainOf(choix1.get(i));
				recomandations=x.reco(x.getVar(choix1.get(i)), memory);
				best="";
				bestproba=-1;
								
				for(int j=0; j<x.getVar(choix1.get(i)).domain; j++){
					String d=x.getVar(choix1.get(i)).valeurs.get(j);
					if(possibles.contains(d)){
//						if(recomandations.get(d)>bestproba){
//							bestproba=recomandations.get(d);
							best=d;
						}
//						System.out.println(choix1.get(i)+"="+d +" : "+recomandations.get(d)*100+"%" );
//					}else{
//						System.out.println(choix1.get(i)+"="+d +" : "+recomandations.get(d)*100+"%  -- interdit --");
//					}
				}
//				
//				if(choix2.get(i).compareTo(best)==0){
//					System.out.println("success");
//					success++;
//				}else{
					if(possibles.contains(choix2.get(i))){
//						System.out.println("echec");
						echec++;
						best=choix2.get(i);
					}else{
//						System.out.println("error");
						error++;
						System.out.println(choix1.get(i)+"="+choix2.get(i));
					}
//				}
				
				memory.add(choix1.get(i));
				memory.add(best);
				x.conditioner(x.getVar(choix1.get(i)), x.getVar(choix1.get(i)).conv(best));
				cs.assignAndPropagate(choix1.get(i), best);
//				System.out.println("apres choix "+choix1.get(i)+"="+best+" ; reste "+x.countingpondere());
				choix1.remove(i);
				choix2.remove(i);
		}
		System.out.println(it+"(m"+m+") : "+success + " success; "+ echec+" echecs; "+ error+" errors");
		mconf[m-1]++;
		if(error>0) mechec[m-1]++;
		totsuccess+=success;
		totechec+=echec;
		toterror+=error;
		
		//deconditionner all
		x.deconditionerAll();
		cs.readProblem("big");
		cs.initialize();
		}
				
		for(int j=0; j<12; j++)
			System.out.println("mois "+(j+1)+" : conf="+mconf[j]+" / echec="+mechec[j]);
		System.out.println("success:"+totsuccess+" echec:"+totechec+" errors:"+toterror);
	}
	
	//small
	//500voitures + 12,12 + methode 0 + seuil 50 //success:21258 echec:1622 errors:1120
	//500voitures + 12,12 + methode 2 + seuil 50 //success:21486 echec:1394 errors:1120
	//500voitures + 12,12 + methode 2 + seuil 10 //success:21412 echec:1468 errors:1120
	//500voitures + 10,12 + methode 2 + seuil 10 //success:21229 echec:1651 errors:1120
//			mois 1 : conf=791 / echec=791
//			mois 2 : conf=1004 / echec=1004
//			mois 3 : conf=2320 / echec=2320
//			mois 4 : conf=2651 / echec=2651
//			mois 5 : conf=1885 / echec=1885
//			mois 6 : conf=1096 / echec=1096
//			mois 7 : conf=1693 / echec=1476
//			mois 8 : conf=177 / echec=170
//			mois 9 : conf=1481 / echec=1387
//			mois 10 : conf=1452 / echec=591
//			mois 11 : conf=556 / echec=52
//			mois 12 : conf=866 / echec=16

	//medium
	//500voitures + 10,12 + methode 0 + seuil 10 //success:20755 echec:1061 errors:184
	//500voitures + 10,12 + methode 2 + seuil 10 //success:20754 echec:1062 errors:184
	//500voitures + 10,12 + methode 2 + seuil 50 //success:20756 echec:1060 errors:184
	//500voitures + 10,12 + methode 0 + seuil 50 //success:20734 echec:1082 errors:184
//	mois 1 : conf=1463 / echec=1458
//			mois 2 : conf=1557 / echec=1502
//			mois 3 : conf=291 / echec=222
//			mois 4 : conf=532 / echec=344
//			mois 5 : conf=551 / echec=286
//			mois 6 : conf=386 / echec=192
//			mois 7 : conf=392 / echec=209
//			mois 8 : conf=660 / echec=103
//			mois 9 : conf=574 / echec=49
//			mois 10 : conf=961 / echec=64
//			mois 11 : conf=495 / echec=18
//			mois 12 : conf=1289 / echec=20

	//smalll
	//500voitures + 10,12 + methode 2 + seuil 50 //success:21002 echec:1635 errors:363
	//500voitures + 1,12  + methode 2 + seuil 50 //success:21495 echec:1142 errors:363
	//500voitures + 10,12 + methode3.1+ seuil 50 //success:20914 echec:1723 errors:363
	//500voitures + 1,12  + methode3.1+ seuil 50 //success:21497 echec:1140 errors:363
	//500voitures + 1,12  + methode3.1+ seuil 50 r success:21366 echec:1171 errors:463
	//500voitures + 1,12  + methode3.1+ seuil 50 r success:21356 echec:1162 errors:482
//			mois 1 : conf=791 / echec=555
//			mois 2 : conf=1004 / echec=432
//			mois 3 : conf=2320 / echec=1021
//			mois 4 : conf=2651 / echec=1167
//			mois 5 : conf=1885 / echec=747
//			mois 6 : conf=1096 / echec=334
//			mois 7 : conf=1693 / echec=559
//			mois 8 : conf=177 / echec=49
//			mois 9 : conf=1481 / echec=487
//			mois 10 : conf=1452 / echec=447
//			mois 11 : conf=556 / echec=46
//			mois 12 : conf=866 / echec=16
	
	
	//big
	//		mois 1 : conf=125 / echec=125
	//		mois 2 : conf=45 / echec=45
	//		mois 3 : conf=212 / echec=212
	//		mois 4 : conf=599 / echec=599
	//		mois 5 : conf=1058 / echec=898
	//		mois 6 : conf=755 / echec=362
	//		mois 7 : conf=227 / echec=86
	//		mois 8 : conf=1000 / echec=342
	//		mois 9 : conf=1003 / echec=372
	//		mois 10 : conf=1266 / echec=486
	//		mois 11 : conf=991 / echec=420
	//		mois 12 : conf=1247 / echec=512
		
	/*	CompilateurSLDD cs;
		cs=new CompilateurSLDD(Protocol.BT);
		cs.readProblem("small");
		cs.initialize();	
		
		System.out.println(cs.getCurrentDomainOf("v16"));
		cs.assignAndPropagate("v1", "1");
		System.out.println(cs.getCurrentDomainOf("v16"));
		System.out.println("v0:"+cs.getCurrentDomainOf("v0"));
		System.out.println(cs.getCurrentDomainOf("v16"));
		cs.assignAndPropagateNoMaj("v16", "1");
		System.out.println(cs.getCurrentDomainOf("v4"));
		cs.assignAndPropagateNoMaj("v4", "0");
		System.out.println(cs.getFreeVariables().toString());
		System.out.println(cs.getCurrentDomainOf("v16"));
		System.out.println(cs.getSizeOfCurrentDomainOf("v16"));
		//System.out.println(cs.getCurrentDomainOf("v16"));
	//	cs.assignAndPropagate("v16", "0");
		
	}*/


	
		
		/*long sum=0, temps, start, start1, start2, start3, start4, start5, temps1, temps2, temps3, temps4, sum2=0, sum3=0;
		int [] tab=new int[160];
		int [] tabcpt=new int[160];
		for(int i=0; i<160; i++){
			tab[i]=0;
			tabcpt[i]=0;

		}
		
		
		int nbactions=0;
		LecteurCdXml lecteur=new LecteurCdXml();
		cs.readProblem("souffleuse");
		//cs.readProblem("hbigPrices");
		for(int i=0; i<1000; i++){
//		int i=0;
			lecteur.lectureXml("scenarios-big-minimal.xml", i);
			start1=System.currentTimeMillis();
			cs.readProblem("big");
			temps1=System.currentTimeMillis()-start1;
			start2=System.currentTimeMillis();
			cs.initialize();
			cs.maxCost();
			cs.minCost();
			//System.out.println(cs.getFreeVariables());
			temps2=System.currentTimeMillis()-start2;
			start3=System.currentTimeMillis();
			for(int j=1; j<lecteur.dom.length; j++){
				start4=System.currentTimeMillis();
				cs.assignAndPropagate(lecteur.var[j], lecteur.dom[j]);
				cs.maxCost();
				cs.minCost();
				cs.getFreeVariables();
				temps4=System.currentTimeMillis()-start4;
				tab[j]+=temps4;
				tabcpt[j]++;
//				System.out.println(temps4);
			}
			temps3=System.currentTimeMillis()-start3;
//			System.out.print(i+"/"+lecteur.dom.length);
			nbactions+=lecteur.dom.length;
			sum+=temps1;
			sum2+=temps2;
			sum3+=temps3;
//			System.out.println();
			
		}
		System.out.println();
		System.out.println(nbactions+" "+sum+" "+sum2+" "+sum3+" ="+(sum+sum2+sum3));
		for(int i=0; i<160; i++){
			System.out.println(tab[i]);
		}
		System.out.println("--------");
		for(int i=0; i<160; i++){
			System.out.println(tabcpt[i]);
		}*/
		/*
		
			System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");

			
				String var, val;
				
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v8"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.maxCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v8"));
				System.out.println(cs.maxCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v8"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.maxCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v8"));
				System.out.println(cs.maxCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v8"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.maxCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v8"));
				System.out.println(cs.maxCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v8"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.maxCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				System.out.println(cs.minCosts("v8"));
				System.out.println(cs.maxCosts("v74"));
				System.out.println("[max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				
				var="v8";
				val="1";
				cs.isPresentInCurrentDomain(var, val);
				cs.assignAndPropagate(var, val);
				System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v74";
				val="99";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v119";
				val="0";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v51";
				val="0";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				
				
		/*		
				var="v8";
				val="0";
				cs.isPresentInCurrentDomain(var, val);
				cs.assignAndPropagate(var, val);
				System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v27_1_Option";
				val="99";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v66";
				val="1";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v40_1_OptionPack";
				val="1";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v26_4_Serie";
				val="1";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v26";
				val="2";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v79";
				val="0";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v2";
				val="3";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v112";
				val="99";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v16";
				val="2";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v82";
				val="1";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v85";
				val="0";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v90";
				val="2";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				
				var="v100";
				val="99";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v114";
				val="0";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v107";
				val="99";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
	System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();

				var="v116";
				val="0";
				cs.isPresentInCurrentDomain(var, val);
cs.assignAndPropagate(var, val);
System.out.println("assign "+var+"="+val+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				
				System.out.println("---------------");
				cs.isPresentInCurrentDomain("v62", "0");

				
				temps3=System.currentTimeMillis()-start3;
				start4=System.currentTimeMillis();

				//System.out.println(System.currentTimeMillis()-start1+"ms");
				//System.out.println(System.currentTimeMillis()-start2+"ms");
				//System.out.println(System.currentTimeMillis()-start3+"ms");
				
				var="v107";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				
				var="v114";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v82";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v100";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v8";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v90";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v116";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v16";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v40_1_OptionPack";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v2";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v26";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v66";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v27_1_Option";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v112";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				var="v26_4_Serie";
				cs.unassignAndRestore(var);
				//cs.assignAndPropagate(var, val);
				System.out.println("unassign "+var+" [max="+cs.maxCost() +" min=" + cs.minCost()+"]");
				//System.out.println(cs.getFreeVariables());
				cs.isConfigurationComplete();
				cs.isPresentInCurrentDomain("v62", "0");

				temps4=System.currentTimeMillis()-start4;

				
				System.out.println(temps1+"ms");
				System.out.println(temps2+"ms");
				System.out.println(temps3+"ms");
				System.out.println(temps4+"ms");*/

		

		//System.out.println(cs.maxCost());
		//System.out.println(cs.minCost());

//System.out.println("---");
//System.out.println(sum+"ms");
//System.out.println(sum2+"ms");
//System.out.println(nbactions+" actions");

		
}
/*
public class Main {



	
	public static void main(String[] args) {
		
		boolean arg_err=false;
		String arg_FichierACompiler = "";
		boolean arg_plus=true;
		int arg_heuristique=0;
		String arg_formefinale="";
		String arg_FichierSortie="";
		boolean flag_fichierSortie=false;
		boolean flag_beg=false;
		
		args=new String[4];
		args[0]="hbigPrices";
		args[1]="+";
		args[2]="3";
		args[3]="AADD";
		//args[4]="a";
		//args[5]="noskip";

		
		if(args.length<2 || args.length>6){
			System.out.println("too few or too many arguments");
			System.exit(0);
		}
		
		//file
		arg_FichierACompiler=args[0];
		
		//type
		if(args[1].compareTo("plus")==0 || args[1].compareTo("time")==0 || args[1].compareTo("p")==0 || args[1].compareTo("t")==0 || args[1].compareTo("+")==0 || args[1].compareTo("*")==0){
			if (args[1].compareTo("time")==0 || args[1].compareTo("t")==0 || args[1].compareTo("*")==0 )
				arg_plus=false;
		}else{
			arg_err=true;
			System.out.println("erreur :  argument 2 doit etre \"plus\" ou \"time\" ");
		}
		
		//heuristic
		if(args.length>2){
			try {
				arg_heuristique=Integer.parseInt(args[2]);
				if (arg_heuristique>10 || arg_heuristique<0){
					arg_err=true;
					System.out.println("erreur :  argument 3 (x) doit etre un nombre compris entre 0 et 10");
				}
			} catch (NumberFormatException e) {
				arg_err=true;
				System.out.println("erreur :  argument 3 (x) doit etre un nombre");
			}
		}else{
			arg_heuristique=3;
		}

		if(args.length>3){
			arg_formefinale=args[3];
			if(!(arg_formefinale.contains("AADD") || arg_formefinale.contains("SLDDp") || arg_formefinale.contains("SLDDt") || arg_formefinale.contains("ADD")) ){
				arg_err=true;
				System.out.println("erreur : forme final (" + args[3] + ") non accepté. possibilités : AADD, SLDDp, SLDDt, ADD");
			}
		}else{
			arg_formefinale="prout";
		}
		
		if(args.length>4){
			flag_fichierSortie=true;
			arg_FichierSortie=args[4];
		}
		
		if(args.length>5){
			if(args[5].compareToIgnoreCase("NoSkip")==0){
				flag_beg=true;
			}
		}
		
		
		if(arg_err){
			System.out.println("programme interompu");
			System.exit(0);
		}	
		
		CompilateurSLDD cs;
		cs=new CompilateurSLDD(null);

		cs.compilation(args[0], arg_plus, arg_heuristique, arg_formefinale, arg_FichierSortie, flag_fichierSortie, flag_beg);
		
		
	}
}*/


